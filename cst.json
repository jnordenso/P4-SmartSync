"(program (line (declaration Number grade = (expression (arithmetic (multExpr (atom 0005)))) ;)) (line (declaration Text letterGrade = (expression (stringArithmetic (stringAtom \"\"))) ;)) (line (output OUTPUT (value \"Grade: \") ;)) (line (output OUTPUT (value grade) ;)) (line (statements (ifStm IF (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)) + (multExpr (atom 5) / (atom 20)))) GREATER (atomCon (arithmetic (multExpr (atom 90)))))) { (line (output OUTPUT (value \"Grade is greater than 90\") ;)) (line (declaration Number grade1 = (expression (arithmetic (multExpr (atom grade)) + (multExpr (atom 5) / (atom 20)))) ;)) (line (output OUTPUT (value grade1) ;)) } (else ELSE { (line (output OUTPUT (value \"Grade is less than 90 what up\") ;)) (line (declaration Number grade1 = (expression (arithmetic (multExpr (atom grade)) + (multExpr (atom 5) / (atom 20)))) ;)) (line (output OUTPUT (value grade1) ;)) })))) (line (declaration Boolean isGradeGreaterThan90 = (expression (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) GREATER (atomCon (arithmetic (multExpr (atom 90))))))) ;)) (line (statements (ifStm IF (condition (multConExpr (atomCon (arithmetic (multExpr (atom isGradeGreaterThan90))))) OR (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) EQUAL (atomCon (arithmetic (multExpr (atom 90)))))) )))) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"A\"))) ;)) } (elses ELSE IF (condition (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) GREATER (atomCon (arithmetic (multExpr (atom 80)))))) ))) OR (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) EQUAL (atomCon (arithmetic (multExpr (atom 80)))))) )))) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"B\"))) ;)) } (elses ELSE IF (condition (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) GREATER (atomCon (arithmetic (multExpr (atom 70)))))) ))) OR (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) EQUAL (atomCon (arithmetic (multExpr (atom 70)))))) )))) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"C\"))) ;)) } (else ELSE { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"F\"))) ;)) })))))) (line (declaration Text outputString = (expression (stringArithmetic (stringAtom \"Letter Grade: \") + (stringAtom letterGrade))) ;)) (line (output OUTPUT (value outputString) ;)) (line (functions Text FUNCTION calculateGrade ( Number grade ) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"\"))) ;)) (line (statements (ifStm IF (condition (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) GREATER (atomCon (arithmetic (multExpr (atom 90)))))) ))) OR (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) EQUAL (atomCon (arithmetic (multExpr (atom 90)))))) )))) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"A\"))) ;)) (line (declaration Text outputString2 = (expression (stringArithmetic (stringAtom \"Grade: \") + (stringAtom letterGrade))) ;)) (line (output OUTPUT (value outputString2) ;)) } (elses ELSE IF (condition (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) GREATER (atomCon (arithmetic (multExpr (atom 80)))))) ))) OR (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) EQUAL (atomCon (arithmetic (multExpr (atom 80)))))) )))) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"B\"))) ;)) } (elses ELSE IF (condition (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) GREATER (atomCon (arithmetic (multExpr (atom 70)))))) ))) OR (multConExpr (atomCon ( (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) EQUAL (atomCon (arithmetic (multExpr (atom 70)))))) )))) { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"C\"))) ;)) } (else ELSE { (line (assignments letterGrade = (expression (stringArithmetic (stringAtom \"F\"))) ;)) })))))) RETURN (funcReturn (value letterGrade)) ; })) (line (assignments letterGrade = (expression (value calculateGrade ( (funcReturn (value 85)) ))) ;)) (line (declaration Text outputString2 = (expression (stringArithmetic (stringAtom \"Letter Grade2: \") + (stringAtom letterGrade))) ;)) (line (output OUTPUT (value outputString2) ;)) (line (statements WHILE (condition (multConExpr (atomCon (arithmetic (multExpr (atom grade)))) LESS (atomCon (arithmetic (multExpr (atom 100)))))) { (line (assignments grade = (expression (arithmetic (multExpr (atom grade)) + (multExpr (atom 1)))) ;)) (line (assignments letterGrade = (expression (value calculateGrade ( (funcReturn (value grade)) ))) ;)) (line (output OUTPUT (value \"Grade: \") ;)) (line (output OUTPUT (value grade) ;)) (line (declaration Text outputString3 = (expression (stringArithmetic (stringAtom \" Letter Grade: \") + (stringAtom letterGrade))) ;)) (line (output OUTPUT (value outputString3) ;)) })) (line (declaration Number grades [] = [ (arrayValue (value 1)) , (arrayValue (value 2)) , (arrayValue (value 3)) , (arrayValue (value 4)) , (arrayValue (value 5)) ] ;)) (line (output OUTPUT (value grades [ (value 1) ]) ;)) (line (assignments grades [ (value 1) ] = (expression (arithmetic (multExpr (atom 0)))) ;)) (line (statements (arrayStm grades [] PULL ;))) (line (statements (arrayStm grades [] PUSH (value 6) ;))) (line (declaration Number length = (expression (value grades [] SIZE)) ;)) (line (assignments grades [] = [ (arrayValue (value 1)) , (arrayValue (value 2)) , (arrayValue (value 3)) ] ;)) (line (declaration Text name = (expression (stringArithmetic (stringAtom \"John IF WHILE\"))) ;)) (line (functions Number FUNCTION add ( Number a , Number b ) { RETURN (funcReturn (value grades [])) ; })))"
